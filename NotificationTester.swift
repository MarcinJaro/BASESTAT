import Foundation
import UserNotifications

// Prosty skrypt do testowania powiadomie≈Ñ
class NotificationTester {
    static func testNotifications() {
        print("üß™ Testowanie systemu powiadomie≈Ñ...")
        
        // Najpierw pro≈õba o pozwolenie na powiadomienia
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            if granted {
                print("‚úÖ Pozwolenie na powiadomienia zosta≈Ço udzielone")
                
                // Sprawd≈∫ szczeg√≥≈Çy ustawie≈Ñ powiadomie≈Ñ
                UNUserNotificationCenter.current().getNotificationSettings { settings in
                    DispatchQueue.main.async {
                        print("üîî Status powiadomie≈Ñ: \(settings.authorizationStatus.rawValue)")
                        print("üîî Status powiadomie≈Ñ na ekranie blokady: \(settings.lockScreenSetting.rawValue)")
                        print("üîî Status powiadomie≈Ñ w centrum powiadomie≈Ñ: \(settings.notificationCenterSetting.rawValue)")
                        print("üîî Status d≈∫wiƒôk√≥w powiadomie≈Ñ: \(settings.soundSetting.rawValue)")
                        print("üîî Status odznak powiadomie≈Ñ: \(settings.badgeSetting.rawValue)")
                        
                        if settings.authorizationStatus == .authorized {
                            // Wy≈õlij testowe powiadomienie
                            self.sendTestNotification()
                        } else {
                            print("‚ùå Powiadomienia nie sƒÖ autoryzowane")
                        }
                    }
                }
            } else if let error = error {
                print("‚ùå B≈ÇƒÖd podczas pro≈õby o pozwolenie na powiadomienia: \(error.localizedDescription)")
            } else {
                print("‚ùå U≈ºytkownik nie udzieli≈Ç pozwolenia na powiadomienia")
            }
        }
    }
    
    static func sendTestNotification() {
        // Tworzymy tre≈õƒá powiadomienia
        let content = UNMutableNotificationContent()
        content.title = "Test powiadomienia BASEstat"
        content.body = "To jest testowe powiadomienie z aplikacji BASEstat üí∞"
        content.sound = UNNotificationSound(named: UNNotificationSoundName("cash_register.wav"))
        
        // Dodajemy dane u≈ºytkownika
        content.userInfo = [
            "testId": "123",
            "testValue": 199.99
        ]
        
        // Ustawiamy trigger do natychmiastowego wys≈Çania
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        
        // Tworzymy ≈ºƒÖdanie powiadomienia
        let request = UNNotificationRequest(
            identifier: UUID().uuidString,
            content: content,
            trigger: trigger
        )
        
        // Wysy≈Çamy powiadomienie
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå B≈ÇƒÖd podczas wysy≈Çania powiadomienia: \(error.localizedDescription)")
            } else {
                print("‚úÖ Powiadomienie zosta≈Ço pomy≈õlnie wys≈Çane")
                
                // Sprawd≈∫ oczekujƒÖce i dostarczone powiadomienia
                self.checkPendingNotifications()
            }
        }
    }
    
    static func checkPendingNotifications() {
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            print("üìã Liczba oczekujƒÖcych powiadomie≈Ñ: \(requests.count)")
            
            UNUserNotificationCenter.current().getDeliveredNotifications { notifications in
                print("üì¨ Liczba dostarczonych powiadomie≈Ñ: \(notifications.count)")
                
                // Dla ka≈ºdego dostarczonego powiadomienia wypisz informacje
                if !notifications.isEmpty {
                    print("üì¨ Lista dostarczonych powiadomie≈Ñ:")
                    for (index, notification) in notifications.enumerated() {
                        print("  \(index + 1). \(notification.request.content.title)")
                    }
                }
            }
        }
    }
}

// Wywo≈Çaj test powiadomie≈Ñ
print("üöÄ Uruchamiam tester powiadomie≈Ñ...")
NotificationTester.testNotifications()

// Utrzymaj dzia≈Çanie programu przez 10 sekund, aby mieƒá czas na przetworzenie powiadomie≈Ñ
print("‚è≥ Oczekiwanie na zako≈Ñczenie test√≥w...")
Thread.sleep(forTimeInterval: 10)
print("‚úÖ Testy zako≈Ñczone!") 