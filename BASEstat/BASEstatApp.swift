//
//  BASEstatApp.swift
//  BASEstat
//
//  Created by Marcin Jaroszewicz on 15/03/2025.
//

import SwiftUI
import UserNotifications

@main
struct BASEstatApp: App {
    @StateObject private var baselinkerService = BaselinkerService()
    @StateObject private var notificationService = NotificationService()
    @UIApplicationDelegateAdaptor private var appDelegate: AppDelegate
    
    var body: some Scene {
        WindowGroup {
            ContentView(baselinkerService: baselinkerService)
                .environmentObject(baselinkerService)
                .environmentObject(notificationService)
                .onAppear {
                    // Przypisz serwis powiadomie≈Ñ do AppDelegate
                    appDelegate.notificationService = notificationService
                    
                    // Pobierz dane przy starcie aplikacji
                    baselinkerService.fetchOrders()
                    
                    // Pobierz dane produkt√≥w z magazynu
                    baselinkerService.fetchInventories()
                    
                    /* 
                    // Test powiadomie≈Ñ - zakomentowane, aby wy≈ÇƒÖczyƒá automatyczne testy powiadomie≈Ñ
                    print("üîî Uruchamiam test powiadomie≈Ñ...")
                    DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                        print("‚è∞ Czas na test powiadomie≈Ñ...")
                        notificationService.testNotifications()
                    }
                    */
                    
                    // Uruchamiamy automatyczne od≈õwie≈ºanie podsumowania dziennego
                    baselinkerService.startDailySummaryAutoRefresh()
                    
                    // Uruchamiamy automatyczne pobieranie nowych zam√≥wie≈Ñ co 30 sekund
                    baselinkerService.startDeltaUpdateAutoRefresh()
                }
            
            // Nowy design aplikacji - zakomentowany do czasu pe≈Çnej implementacji
            // MainView()
        }
    }
}

// Klasa delegata aplikacji do obs≈Çugi powiadomie≈Ñ
class AppDelegate: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
    // Instancja serwisu powiadomie≈Ñ, dostƒôpna publicznie dla innych komponent√≥w
    var notificationService: NotificationService?
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        // Ustaw delegata dla powiadomie≈Ñ
        UNUserNotificationCenter.current().delegate = self
        
        // Inicjalizacja domy≈õlnych warto≈õci dla ustawie≈Ñ powiadomie≈Ñ
        // przy pierwszym uruchomieniu aplikacji
        if UserDefaults.standard.object(forKey: "showNotificationBanners") == nil {
            UserDefaults.standard.set(true, forKey: "showNotificationBanners")
        }
        if UserDefaults.standard.object(forKey: "playNotificationSound") == nil {
            UserDefaults.standard.set(true, forKey: "playNotificationSound")
        }
        if UserDefaults.standard.object(forKey: "showNotificationBadges") == nil {
            UserDefaults.standard.set(true, forKey: "showNotificationBadges")
        }
        
        // Rejestracja kategorii powiadomie≈Ñ
        registerNotificationCategories()
        
        // Popro≈õ o pozwolenie na powiadomienia przy starcie
        requestNotificationPermissions()
        
        // Inicjalizacja serwisu powiadomie≈Ñ
        self.notificationService = NotificationService()
        
        return true
    }
    
    // Ta metoda pozwala na wy≈õwietlanie powiadomie≈Ñ, gdy aplikacja jest w trybie foreground
    func userNotificationCenter(_ center: UNUserNotificationCenter, 
                               willPresent notification: UNNotification, 
                               withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        // Mo≈ºliwe, ≈ºe ograniczenia systemowe nie pozwalajƒÖ na wy≈õwietlanie banner√≥w w foreground
        // Pr√≥bujemy r√≥≈ºnych kombinacji opcji prezentacji
        
        // Wymuszamy wy≈õwietlenie powiadomienia zawsze z maksymalnymi opcjami
        if #available(iOS 14.0, *) {
            // iOS 14+ u≈ºywa nowych opcji
            completionHandler([.banner, .list, .sound, .badge])
            print("üì± iOS 14+: Powiadomienie z opcjami banner, list, sound, badge")
        } else {
            // iOS 13 i starsze
            completionHandler([.alert, .sound, .badge])
            print("üì± iOS <14: Powiadomienie z opcjami alert, sound, badge")
        }
        
        print("üì≤ Powiadomienie wy≈õwietlone w trybie foreground: \(notification.request.content.title)")
        
        // Dodatkowo, wy≈õwietlimy informacjƒô o powiadomieniu na konsoli
        dump(notification)
    }
    
    // Ta metoda jest wywo≈Çywana, gdy u≈ºytkownik reaguje na powiadomienie
    func userNotificationCenter(_ center: UNUserNotificationCenter, 
                               didReceive response: UNNotificationResponse, 
                               withCompletionHandler completionHandler: @escaping () -> Void) {
        // Obs≈Çuga reakcji u≈ºytkownika na powiadomienie
        print("üëÜ U≈ºytkownik kliknƒÖ≈Ç powiadomienie: \(response.notification.request.content.title)")
        
        // Tutaj mo≈ºna dodaƒá kod do obs≈Çugi klikniƒôcia w powiadomienie, np. przej≈õcie do konkretnego widoku
        
        completionHandler()
    }
    
    // Funkcja rejestrujƒÖca kategorie powiadomie≈Ñ
    private func registerNotificationCategories() {
        // Kategoria dla krytycznych powiadomie≈Ñ
        let viewAction = UNNotificationAction(
            identifier: "VIEW_ACTION",
            title: "Poka≈º szczeg√≥≈Çy",
            options: .foreground
        )
        
        let dismissAction = UNNotificationAction(
            identifier: "DISMISS_ACTION",
            title: "Zamknij",
            options: .destructive
        )
        
        let criticalCategory = UNNotificationCategory(
            identifier: "CRITICAL_CATEGORY",
            actions: [viewAction, dismissAction],
            intentIdentifiers: [],
            options: [.customDismissAction]
        )
        
        // Kategoria dla nowych zam√≥wie≈Ñ
        let viewOrderAction = UNNotificationAction(
            identifier: "VIEW_ORDER_ACTION",
            title: "Zobacz zam√≥wienie",
            options: .foreground
        )
        
        let orderCategory = UNNotificationCategory(
            identifier: "ORDER_CATEGORY",
            actions: [viewOrderAction, dismissAction],
            intentIdentifiers: [],
            options: [.customDismissAction]
        )
        
        // Rejestracja wszystkich kategorii
        UNUserNotificationCenter.current().setNotificationCategories([criticalCategory, orderCategory])
    }
    
    // Funkcja proszƒÖca o uprawnienia do powiadomie≈Ñ
    private func requestNotificationPermissions() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            if granted {
                print("‚úÖ Uprawnienia do powiadomie≈Ñ zosta≈Çy przyznane przy starcie aplikacji")
            } else if let error = error {
                print("‚ùå B≈ÇƒÖd przy pro≈õbie o uprawnie≈Ñ do powiadomie≈Ñ: \(error.localizedDescription)")
            } else {
                print("‚ùå U≈ºytkownik odm√≥wi≈Ç uprawnie≈Ñ do powiadomie≈Ñ")
            }
        }
    }
}
